# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::MatchPlayersController, type: :controller do
  let(:admin) { create(:player, :admin) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MatchPlayersController. Be sure to keep this updated too.
  let(:valid_session) { request.headers.merge!(auth_headers(admin)) }

  before(:each) { valid_session }

  describe 'GET #index' do
  end

  describe 'GET #show' do
  end

  describe 'POST #confirm' do
    subject { post :confirm, params: { id: match_player.id } }

    let(:match_player) { create(:match_player, result_status: :pending) }

    context 'with valid params' do
      it 'updates the MatchPlayer record to confirmed' do
        expect { subject }.to change { match_player.reload.result_status }.from('pending').to('confirmed')
      end
    end

    context 'with invalid params' do
      context 'match_player does not exist' do
        let(:match_player) { build_stubbed(:match_player, result_status: :pending) }

        it 'does not update any MatchPlayer to confirmed' do
          expect { subject }.to_not(change { MatchPlayer.confirmed.count })
        end
      end

      context 'match_player is not pending' do
        let(:match_player) { create(:match_player, result_status: :rejected) }

        it 'does not update the MatchPlayer record to confirmed' do
          expect { subject }.to_not(change { match_player.result_status })
        end
      end
    end

    context 'with invalid authorization' do
      let(:valid_session) {}

      it 'does not update the MatchPlayer record to confirmed' do
        expect { subject }.to_not(change { match_player.result_status })
      end
    end
  end

  describe 'POST #reject' do
    subject { post :reject, params: { id: match_player.id } }

    let(:match_player) { create(:match_player, result_status: :pending) }

    context 'with valid params' do
      it 'updates the MatchPlayer record to rejected' do
        expect { subject }.to change { match_player.reload.result_status }.from('pending').to('rejected')
      end
    end

    context 'with invalid params' do
      context 'match_player does not exist' do
        let(:match_player) { build_stubbed(:match_player, result_status: :pending) }

        it 'does not update any MatchPlayer to confirmed' do
          expect { subject }.to_not(change { MatchPlayer.rejected.count })
        end
      end

      context 'match_player is not pending' do
        let(:match_player) { create(:match_player, result_status: :confirmed) }

        it 'does not update the MatchPlayer record to confirmed' do
          expect { subject }.to_not(change { match_player.result_status })
        end
      end
    end

    context 'with invalid authorization' do
      let(:valid_session) {}

      it 'does not update the MatchPlayer record to confirmed' do
        expect { subject }.to_not(change { match_player.result_status })
      end
    end
  end
end
